import streamlit as st
from PIL import Image
import torch
import torchvision.transforms as transforms
from torchvision import models
import os
import torch.nn as nn

# T·∫°o l·∫°i ki·∫øn tr√∫c model
model = models.resnet18(weights=None)
num_ftrs = model.fc.in_features
model.fc = nn.Linear(num_ftrs, 3)  # 3 l·ªõp: acne, lochanlong, sactoda

# Load tr·ªçng s·ªë ƒë√£ hu·∫•n luy·ªán
if not os.path.exists("skin_model.pth"):
    st.error("Kh√¥ng t√¨m th·∫•y t·ªáp m√¥ h√¨nh 'skin_model.pth'. Vui l√≤ng ki·ªÉm tra l·∫°i.")
else:
    model.load_state_dict(torch.load("skin_model.pth", map_location=torch.device('cpu')))
    model.eval()

# C√°c class
classes = ['acne', 'lochanlong', 'sactoda']

# Ti·ªÅn x·ª≠ l√Ω ·∫£nh
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
])

st.title("üß¥ Ch·∫•m ƒëi·ªÉm t√¨nh tr·∫°ng da")
st.write("üì∑ B·∫°n c√≥ th·ªÉ **ch·ª•p ·∫£nh** ho·∫∑c **t·∫£i ·∫£nh l√™n** ƒë·ªÉ ph√¢n t√≠ch:")

# T√πy ch·ªçn: Ch·ª•p ·∫£nh ho·∫∑c t·∫£i ·∫£nh
option = st.radio("Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p ·∫£nh:", ["Ch·ª•p ·∫£nh", "T·∫£i ·∫£nh l√™n"])

if option == "Ch·ª•p ·∫£nh":
    # Ch·ª•p ·∫£nh b·∫±ng camera
    captured_image = st.camera_input("Ch·ª•p ·∫£nh tr·ª±c ti·∫øp")
    if captured_image is not None:
        image = Image.open(captured_image)
    else:
        image = None
elif option == "T·∫£i ·∫£nh l√™n":
    # T·∫£i ·∫£nh t·ª´ m√°y
    uploaded_file = st.file_uploader("T·∫£i ·∫£nh t·ª´ m√°y", type=['jpg', 'jpeg', 'png'])
    if uploaded_file is not None:
        image = Image.open(uploaded_file)
    else:
        image = None
else:
    image = None

# X·ª≠ l√Ω ·∫£nh
if image is not None:
    st.image(image, caption='·∫¢nh b·∫°n ƒë√£ ch·ªçn', use_column_width=True)

    # Ti·ªÅn x·ª≠ l√Ω
    input_tensor = transform(image).unsqueeze(0)

    # D·ª± ƒëo√°n
    with torch.no_grad():
        output = model(input_tensor)
        scores = torch.softmax(output[0], dim=0)

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    st.subheader("üìä K·∫øt qu·∫£ ph√¢n t√≠ch da:")
    for i in range(len(classes)):
        score = scores[i].item()
        st.write(f"üîπ {classes[i]}: {score*10:.2f}/10")
else:
    st.warning("Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p ·∫£nh ƒë·ªÉ ph√¢n t√≠ch.")
